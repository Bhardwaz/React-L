Config Driven UI
This is the industry trend to use Config Driven UI in that i can show different UI Features, Offers etc or whatever i want according to users's geographical locations.
   A Config is send by backend

React is just a javascript library and it let you write less code and build performant apps of production standard

React JS Does not Have any Opinion about File Structure
Avoid Too Much Nesting. Do not overthink it

export default Header -> Do this when you have only one Component in files
export const Header() => {} -> Do this when you have more than one components in file  

import {named expor}
import ExportDefault

whenever we have hard coded data we do not put that into any components or other files. we put that seprately into utils folder, config  or a dedicated folder for hardcore data

React is Fast in DOM Manipulation.
React Keeps in Front End and the data in sync if my UI Changes so my data and react does it so fast
Got Question that why react is fast because it can do faster DOM manipulation because there is something called Diff Algorithm, reconciliation

when we make a variable in react using useState Hook it becomes super powerful variable

React Hooks are Normal Javascript Function. import {useState} from React Means someone has created const export useState = () => {} something like this in react core code

Local State Variable
const [card] = useState(null) 
whatever we pass in useState will become default value of state variable
now its something like this const card = null

Normal JS Variable
let card;

whenever a state variable updates it re-renders the component 

React is best because of re-rendering it does it so fast with reconciliation

Reconciliation Algorithm (React Fiber)
Suppose i have a variable with 50 restaurant card and my UI changes with 10 filtered restaurant card in React 

First With 50 Restaurant React creates a virtual DOM (Not Actual DOM)
Virtual DOM is the Representation of actual DOM

What is the difference b/w incremental rendering and time slicing in react

In very simple terms, time slicing and incremental rendering are both ways to make computer programs faster by breaking them into smaller pieces.

Time slicing is a way to break a big task into smaller parts, so that the computer can work on each part for a little bit and then switch to something else, like taking turns with different tasks.

Incremental rendering is a way to update a picture or a user interface by changing only the parts that need to be changed, instead of redrawing the whole picture every time. It's like adding or removing individual LEGO blocks from a tower, instead of rebuilding the entire tower every time you make a change.

The time slicing feature is made possible through the use of a new React API called Suspense, which allows developers to define which parts of the component tree should be split into separate chunks and rendered asynchronously. Suspense also provides a way to handle loading states for those chunks, which can be useful for rendering large data sets or handling network requests.

React uses incremental rendering as a core part of its architecture, using a technique called "virtual DOM diffing" to update only the parts of the UI that have changed, rather than re-rendering the entire UI from scratch. This means that when a component's state or props change, React compares the new and old virtual DOM representations of the component, and then updates only the parts that have changed in the actual DOM.

ok what i have understood so far that time slicing break the component tree into chunks and incremental rendering updates the UI that changed async or diffing